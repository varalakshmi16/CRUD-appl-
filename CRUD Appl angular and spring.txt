CRUD Application
*****************

SPRING
*******


HotelManagementApplication.java
=================================

package com.example.demo;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;
import org.springframework.web.servlet.config.annotation.CorsRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;
import com.example.demo.Controller.HotelManagementController;
import com.example.demo.HotelBean.RoomDetails;

@SpringBootApplication
public class HotelManagementSystemApplication implements CommandLineRunner
{
	
	@Autowired
	private HotelManagementController controller;
	
	public static void main(String[] args) {
		SpringApplication.run(HotelManagementSystemApplication.class, args);
	}


	@Bean
	public WebMvcConfigurer configurer(){
	  return new WebMvcConfigurer(){
	    @Override
	    public void addCorsMappings(CorsRegistry registry) {
            registry.addMapping("/**").allowedMethods("GET", "POST", "PUT", "DELETE").allowedOrigins("*")
                    .allowedHeaders("*");
        }
	  };
	}


	@Override
	public void run(String... args) throws Exception {

		controller.saveRoom(new RoomDetails(111,205,"AC with double room","yes",8000));
		
	}
}
	

RoomDetails.java
=================

package com.example.demo.HotelBean;
import javax.persistence.*;

@Entity
@Table(name="roomdetails")
public class RoomDetails {
	
	@Column(name="hotelid")
	private int hotelid;
	
	@Id
	@Column(name="roomno")
	private int roomno;
	
	@Column(name="roomtype")
	private String roomtype;
	
	@Column(name="availabity")
	private String availabity;
	
	@Column(name="price")
	private float price;
	
	
	public int getHotelid() {
		return hotelid;
	}

	public void setHotelid(int hotelid) {
		this.hotelid = hotelid;
	}

	public int getRoomno() {
		return roomno;
	}

	public void setRoomno(int roomno) {
		this.roomno = roomno;
	}

	public String getRoomtype() {
		return roomtype;
	}

	public void setRoomtype(String roomtype) {
		this.roomtype = roomtype;
	}

	public String getAvailabity() {
		return availabity;
	}

	public void setAvailabity(String availabity) {
		this.availabity = availabity;
	}

	public float getPrice() {
		return price;
	}

	public void setPrice(float price) {
		this.price = price;
	}

	public RoomDetails() {
	}

	public RoomDetails(int hotelid, int roomno, String roomtype, String availability, float price) {
		this.hotelid = hotelid;
		this.roomno = roomno;
		this.roomtype = roomtype;
		this.availabity = availability;
		this.price = price;
	}

	@Override
	public String toString() {
		return "RoomDetails [hotelid=" + hotelid + ", roomno=" + roomno + ", roomtype=" + roomtype + ", Availabity="
				+ this.availabity + ", price=" + price + "]";
	}


}


HotelManagementController.java
==================================

package com.example.demo.Controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import com.example.demo.Exception.HotelManagementException;
import com.example.demo.HotelBean.AdminLogin;
import com.example.demo.HotelBean.CustomerData;
import com.example.demo.HotelBean.CustomerSearch;
import com.example.demo.HotelBean.HotelDetails;
import com.example.demo.HotelBean.RoomDetails;
import com.example.demo.HotelService.HotelService;


@RestController
@RequestMapping("/hotel")
@CrossOrigin(origins="http://localhost:4200",allowedHeaders="*")
public class HotelManagementController {

@Autowired
private HotelService hotelService;
	 
	 public void setHotelService(HotelService hotelService) 
		{
			this.hotelService = hotelService;
		}
	 
	 
	 @GetMapping("/listRoom")	
	 public List getRoomDetails()
	 {
		
		 return hotelService.getRoomDetails();
			
	 }
	 
	 
	 @PostMapping("/saveRoom")
	 public boolean saveRoom(@RequestBody RoomDetails roomdetails)
	 {
			
		 return hotelService.saveRoom(roomdetails);
	
	 }
	 
	 @PutMapping("/editRoom")
	 public boolean editRoom(@RequestBody RoomDetails roomdetails)
	 {
			
		 return hotelService.editRoom(roomdetails);
	
	 }
	 
	 
	 @DeleteMapping("/deleteRoom/{roomno}")
	 public boolean deleteRoom(@PathVariable(name="roomno") int roomno)
	 {

		return hotelService.deleteRoom(roomno);
	
	 }
	 

	 

HotelDAO
============

package com.example.demo.HotelDao;

import java.util.List;

import com.example.demo.HotelBean.RoomDetails;


public interface HotelDao {


	public List getRoomDetails();
	public boolean saveRoom(RoomDetails room);
	public boolean editRoom(RoomDetails room);
	public boolean deleteRoom(int roomno) ;


}



HotelDaoImpl.java
===================


package com.example.demo.HotelDao;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

import org.hibernate.Query;
import org.springframework.stereotype.Repository;

import com.example.demo.Exception.HotelManagementException;
import com.example.demo.HotelBean.AdminLogin;
import com.example.demo.HotelBean.BookingDetails;
import com.example.demo.HotelBean.CustomerData;
import com.example.demo.HotelBean.CustomerSearch;
import com.example.demo.HotelBean.HotelDetails;
import com.example.demo.HotelBean.RoomDetails;
@Repository
public class HoteldaoImpl implements HotelDao{
	@PersistenceContext	
	private EntityManager entityManager;

	public void setEntitymanager(EntityManager entitymanager)
	{
		this.entityManager = entitymanager;
	}


	@Override
	public List getRoomDetails() {
		// TODO Auto-generated method stub
		List l= entityManager.createQuery("FROM RoomDetails", RoomDetails.class).getResultList();
		return l;
	}

	@Override
	public boolean saveRoom(RoomDetails room) {
		// TODO Auto-generated method stub
		
		entityManager.persist(room);
		return true;
	}

	@Override
	public boolean editRoom(RoomDetails room) {

		entityManager.merge(room);
		return true;
	}
	
	@Override
	public boolean deleteRoom(int roomno) {
	
		RoomDetails r=entityManager.find(RoomDetails.class, roomno);
		entityManager.remove(r);
		return true;
	}

}



HotelService.java
===================


package com.example.demo.HotelService;

import java.util.List;

import com.example.demo.HotelBean.RoomDetails;

public interface HotelService {

	public List getRoomDetails();
	public boolean saveRoom(RoomDetails room);
	public boolean editRoom(RoomDetails room);
	public boolean deleteRoom(int roomno) ;
}



HotelServiceImpl.java
======================

package com.example.demo.HotelService;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import com.example.demo.HotelBean.RoomDetails;
import com.example.demo.HotelDao.HotelDao;
import com.example.demo.HotelDao.HoteldaoImpl;

@Service
@Transactional
public class HotelServiceImpl implements HotelService {
	@Autowired
	private HotelDao hotelRepository;;

	public void setHotelrepository(HotelDao hotelRepository) {
		this.hotelRepository = hotelRepository;
	}

@Override
public List getRoomDetails() {
	// TODO Auto-generated method stub
	return hotelRepository.getRoomDetails();
}


@Override
public boolean saveRoom(RoomDetails room) {
	// TODO Auto-generated method stub
	return hotelRepository.saveRoom(room);

}


@Override
public boolean editRoom(RoomDetails customer) {
	// TODO Auto-generated method stub
	return hotelRepository.editRoom(customer);
}


@Override
public boolean deleteRoom(int roomno) {
	// TODO Auto-generated method stub
	return hotelRepository.deleteRoom(roomno);
}


application.properties
=======================

server.port=3300
spring.datasource.url=jdbc:mysql://localhost:3306/hotel
spring.datasource.username=root
spring.datasource.password=dsrc
spring.jpa.hibernate.ddl-auto=update

--------------------------------------------------------------------------------------------------------------------

ANGULAR
********

app.module.ts
==============


import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { Routes,RouterModule} from '@angular/router';
import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { FirstComponent } from './components/first/first.component';
import { MyserviceService} from './services/myservice.service';
import {HttpModule} from '@angular/http';
import { NewfirstComponent } from './components/newfirst/newfirst.component';
import {FormsModule} from '@angular/forms';
import { EditfirstComponent } from './components/editfirst/editfirst.component';
const appRoutes:Routes=[

  {path:'',component:FirstComponent},
  {path:'new',component:NewfirstComponent},
  {path:'edit',component:EditfirstComponent}

]

@NgModule({
  declarations: [
    AppComponent,
    FirstComponent,
    NewfirstComponent,
    EditfirstComponent
  ],

  imports: [
    BrowserModule,
    AppRoutingModule,
    HttpModule,
    FormsModule,
    RouterModule.forRoot(appRoutes)
  ],

  providers: [MyserviceService],
  bootstrap: [AppComponent]
})
export class AppModule { }



app.component.ts
==================

<div class="container">
<router-outlet></router-outlet>
</div>
      

roomdetails.ts
===============

export class Roomdetails {

    hotelid:Number;
    roomno:Number;
    roomtype:string;
    availabity:string;
    price:number;

}


myservice.service.ts
=====================

import { Injectable } from '@angular/core';
import {Http,Headers,Response,RequestOptions} from '@angular/http';
import {Observable} from 'rxjs/observable';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/catch';
import 'rxjs/add/observable/throw';
import {Roomdetails} from '../classes/roomdetails';
@Injectable({
  providedIn: 'root'
})
export class MyserviceService {

  private baseurl:string="http://localhost:3300/hotel";
  private headers=new Headers({'Content-Type':'application/json'});
  private options=new RequestOptions({headers:this.headers});
  private roomdetails:Roomdetails;

  constructor(private http:Http) { }

  getRoomList()
  {

  return this.http.get(this.baseurl+'/listRoom',this.options).map((response:Response)=>response.json())
  .catch(this.errorhandler);
  
  }

  addRoom(roomdetails:Roomdetails)
  {

  return this.http.post(this.baseurl+'/saveRoom',JSON.stringify(roomdetails), this.options).map((response:Response)=>response.json())
  .catch(this.errorhandler);

  }

  deleteRoom(roomno:Number)
  {

  return this.http.delete(this.baseurl+'/deleteRoom/'+roomno,this.options).map((response:Response)=>response.json())
  .catch(this.errorhandler);

  }

  editRoom(roomdetails:Roomdetails)
  {

  return this.http.put(this.baseurl+'/editRoom',JSON.stringify(roomdetails),this.options).map((response:Response)=>response.json())
  .catch(this.errorhandler);
  
  }

  errorhandler(error:Response)
  {
  return Observable.throw(error || "SERVER ERROR");
  }

  setter(roomdetails:Roomdetails)
  {
  this.roomdetails=roomdetails;
  }

  getter()
  {
  return this.roomdetails;  
  }
}


first.component.html
=====================

<p>first works!</p>
<div class="container">
    <table class="table table-striped">
        <thead>
            <th>HotelId</th>
            <th> roomno</th>
            <th>roomtype</th>
            <th> Availability</th>
            <th> Price</th>

        </thead>
        <tbody>
            <tr *ngFor="let r of roomdetails">
                    <td> {{r.hotelid}}</td>
                    <td> {{r.roomno}}</td>
                    <td> {{r.roomtype}}</td>
                    <td>{{r.availabity}}</td>
                    <td>{{r.price}}</td>
                    <button class="btn btn-danger" (click)="deleteRoom(r)">Delete</button>
                    <button class="btn btn-primary" (click)="editRoom(r)"> Edit </button>


            </tr>
        </tbody>
    </table>
    <button class="btn btn-primary" (click)="addRoom()"> New RoomDetails </button>

</div>


first.component.ts
===================

import { Component, OnInit } from '@angular/core';
import {MyserviceService} from 'src/app/services/myservice.service';
import { Router } from '@angular/router';
import {Roomdetails} from 'src/app/classes/roomdetails';
@Component({
  selector: 'app-first',
  templateUrl: './first.component.html',
  styleUrls: ['./first.component.css']
})
export class FirstComponent implements OnInit {
  
  private roomdetails:Roomdetails[];
  constructor(private myservice:MyserviceService,private router:Router) { }

  ngOnInit()
  {
  this.myservice.getRoomList().subscribe((roomdetails)=>
  {
  console.log(roomdetails);
  this.roomdetails=roomdetails;
  })
  }

  addRoom()
  {
    let roomdetails= new Roomdetails();
    this.myservice.setter(roomdetails);
    this.router.navigate(['/new']);
  }


  editRoom(roomdetails)
  {
  this.myservice.setter(roomdetails);
  this.router.navigate(['/edit']);
  }


  deleteRoom(roomdetails)
  {
    this.myservice.deleteRoom(roomdetails.roomno).subscribe((roomdetails)=>{
    this.roomdetails.splice(this.roomdetails.indexOf(roomdetails),1);
    });
  }
}


newfirst.component.html
========================

<p>new-roomdetails works!</p>
    <form (ngSubmit)="processForm()">

        <div class="form group">
            <label for="hotelid">hotelid</label>
            <input type="text" name="hotelid" class="form-control" [(ngModel)]="roomdetails.hotelid">
        </div>

        <div class="form group">
            <label for="roomno">roomno</label>
            <input type="text" name="roomno" class="form-control" [(ngModel)]="roomdetails.roomno">
        </div>

        <div class="form group">
            <label for="roomtype">roomtype</label>
            <input type="text" name="roomtype" class="form-control" [(ngModel)]="roomdetails.roomtype">
        </div>
        <div class="form group">
            <label for="Availabity">Availabity</label>
            <input type="text" name="availabity" class="form-control" [(ngModel)]="roomdetails.availabity">
        </div>

        <div class="form group">
            <label for="price">price</label>
            <input type="text" name="price" class="form-control" [(ngModel)]="roomdetails.price">
        </div>

        <input type="submit" value="save" class="btn btn-success">     

    </form>



newfirst.component.ts
======================

import { Component, OnInit } from '@angular/core';
import {Router} from '@angular/router';
import {MyserviceService  } from 'src/app/services/myservice.service';
import {Roomdetails} from 'src/app/classes/roomdetails';

@Component({
  selector: 'app-newfirst',
  templateUrl: './newfirst.component.html',
  styleUrls: ['./newfirst.component.css']
})
export class NewfirstComponent implements OnInit {
  
  private roomdetails=new Roomdetails();
  constructor(private userService:MyserviceService, private router:Router) { }

  ngOnInit() 
  {
    this.roomdetails=this.userService.getter();
  }


  processForm()
  {
    this.userService.addRoom(this.roomdetails).subscribe((data)=>{
    this.router.navigate(['/']);
   });
    
}}


editfirst.component.html
==========================


<p>editfirst works!</p>
    <form (ngSubmit)="editForm()">

        <div class="form group">
            <label for="hotelid">hotelid</label>
            <input type="text" name="hotelid" class="form-control" [(ngModel)]="roomdetails.hotelid">
        </div>

        <div class="form group">
            <label for="roomno">roomno</label>
            <input type="text" name="roomno" class="form-control" [(ngModel)]="roomdetails.roomno">
        </div>

        <div class="form group">
            <label for="roomtype">roomtype</label>
            <input type="text" name="roomtype" class="form-control" [(ngModel)]="roomdetails.roomtype">
        </div>
        <div class="form group">
            <label for="Availabity">Availabity</label>
            <input type="text" name="availabity" class="form-control" [(ngModel)]="roomdetails.availabity">
        </div>

        <div class="form group">
            <label for="price">price</label>
            <input type="text" name="price" class="form-control" [(ngModel)]="roomdetails.price">
        </div>

        <input type="submit" value="save" class="btn btn-success">

        

    </form>



editfirst.component.ts
=======================


import { Component, OnInit } from '@angular/core';
import {Router} from '@angular/router';
import {MyserviceService  } from 'src/app/services/myservice.service';
import {Roomdetails} from 'src/app/classes/roomdetails';
import { Http } from '@angular/http';

@Component({
  selector: 'app-editfirst',
  templateUrl: './editfirst.component.html',
  styleUrls: ['./editfirst.component.css']
})
export class EditfirstComponent implements OnInit {

  constructor(private Service:MyserviceService,private http:Http,private router:Router) { }
  private roomdetails=new Roomdetails();

  ngOnInit() {
    this.roomdetails=this.Service.getter();

  }
  editForm()
  {

   this.Service.editRoom(this.roomdetails).subscribe((user)=>{
    console.log(user);
     this.router.navigate(['/']);
   },(error)=>{
    console.log(error);
   });

 }


}


